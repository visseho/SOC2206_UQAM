dhs_ipv %>%
select(beat_burnfood!= "NA") %>%
mutate(beat_burnfood_cat = factor(ntile(beat_burnfood, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
beat_goesout_cat = factor(ntile(beat_goesout, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
no_media_cat = factor(ntile(no_media, 3), labels = c('Riche', 'Moyen', 'Pauvre')))
dhs_ipv <- read_csv("dhs_ipv.csv")
ggplot(dhs_ipv) +
geom_boxplot(aes(x = no_media_cat, y = beat_burnfood, color = no_media_cat)) +
ggtitle("Association entre ouverture aux médias et acceptation de la violence conjugale") +
xlab("Type de pays selon l'ouverture aux médias") +
ylab("% qui estime qu'une femme doit être battue (beat_burnfood)") +
nolegend()
library(tidyverse)
dhs_ipv <- read_csv("dhs_ipv.csv")
dhs_ipv <-
dhs_ipv %>%
# select(beat_burnfood!= "NA") %>%
mutate(beat_burnfood_cat = factor(ntile(beat_burnfood, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
beat_goesout_cat = factor(ntile(beat_goesout, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
no_media_cat = factor(ntile(no_media, 3), labels = c('Riche', 'Moyen', 'Pauvre')))
ggplot(dhs_ipv) +
geom_bar(aes(x = no_media_cat, fill = beat_burnfood_cat), position = "dodge") +
ggtitle("Association entre ouverture aux médias et acceptation de la violence conjugale") +
xlab("Type de pays selon l'ouverture aux médias") +
ylab("Effectif") +
theme_bw()
ggplot(dhs_ipv) +
geom_boxplot(aes(x = no_media_cat, y = beat_burnfood, color = no_media_cat)) +
ggtitle("Association entre ouverture aux médias et acceptation de la violence conjugale") +
xlab("Type de pays selon l'ouverture aux médias") +
ylab("% qui estime qu'une femme doit être battue (beat_burnfood)") +
nolegend()
ggplot(dhs_ipv) +
geom_boxplot(aes(x = no_media_cat, y = beat_burnfood, color = no_media_cat)) +
ggtitle("Association entre ouverture aux médias et acceptation de la violence conjugale") +
xlab("Type de pays selon l'ouverture aux médias") +
ylab("% qui estime qu'une femme doit être battue (beat_burnfood)") +
theme_bw(nolegend)
data("resume", package = "qss")
# resume <- read_csv("resume.csv")        # What you will do to import the data (remember your directory)
resume
# resume <- read_csv("resume.csv")        # What you will do to import the data (remember your directory)
head(resume)
summary()
summary(resume)
freq(resume$sex)
library(summarytools)
freq(resume$sex)
freq(resume$race)
freq(resume$call)
race_call_tab <-
resume %>%
group_by(race, call) %>%
count()
race_call_tab
race_call_tab <-
resume %>%
group_by(race, call) %>%
count() %>%
mutate(Prop = sum(call) / n)
race_call_tab
race_call_tab <-
resume %>%
group_by(race, call) %>%
count() %>%
mutate(Prop = round(sum(call)/n*100), 2) %>%
subset(call == 1)
race_call_tab
mutate(Prop = round(sum(call)/n*100, 2) %>%
race_call_tab <-
resume %>%
group_by(race, call) %>%
count() %>%
mutate(Prop = round(sum(call)/n*100, 2)) %>%
subset(call == 1)
race_call_tab
race_call_tab <-
resume %>%
group_by(race, call) %>%
count() %>%
mutate(Prop = round(sum(call)/n*100, 2)) %>%
subset(call == 1)
race_call_tab
race_call_tab <-
resume %>%
group_by(race, call) %>%
count() %>%
group_by(race)
race_call_tab <-
resume %>%
group_by(race, call) %>%
count() %>%
group_by(race) %>%
mutate(Prop = round(sum(call)/n*100, 2)) %>%
subset(call == 1)
race_call_tab
ctable(resume, race, call)
ctable(resume$race, resume$call)
library(tidyverse)
library(summarytools)
dhs_ipv <- read_csv("dhs_ipv.csv")
library(tidyverse)
library(summarytools)
dhs_ipv <- read_csv("dhs_ipv.csv")
getwd()
getwd()
library(tidyverse)
library(summarytools)
dhs_ipv <- read_csv("dhs_ipv.csv")
dhs_ipv <-
dhs_ipv %>%
# select(beat_burnfood!= "NA") %>%
mutate(beat_burnfood_cat = factor(ntile(beat_burnfood, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
beat_goesout_cat = factor(ntile(beat_goesout, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
no_media_cat = factor(ntile(no_media, 3), labels = c('Riche', 'Moyen', 'Pauvre')))
head(dhs_ipv)
data("resume", package = "qss")
# resume <- read_csv("resume.csv")        # What you will do to import the data (remember your directory)
head(resume)
freq(resume$sex)
library(summarytools)
freq(resume$race)
freq(resume$call)
ctable(resume$race, resume$call)
ctable(resume$race, resume$sex)
knitr::include_graphics("confounding.jpg")
knitr::include_graphics("cross-sectional.jpg")
knitr::include_graphics("cross-sectional.jpg")
knitr::include_graphics("cross_sectional.jpg")
knitr::include_graphics("Before-After.jpg")
knitr::include_graphics("Double-difference.jpg")
knitr::include_graphics("Double-differences.jpg")
knitr::include_graphics("Double_difference.jpg")
knitr::include_graphics("minimum-wage.jpg")
library("tidyverse")
library("qss")
data("minwage", package = "qss")
write.csv(minwage, file = "minwage.csv")
minwage
summary(minwage)
# View(minwage)
dim(minwage)          # give you the sample size and the number of variables
glimpse(minwage)
View(minwage)
data("minwage", package = "qss")
glimpse(minwage)
data("minwage", package = "qss")
head(minwage)
# Is the proportion full time higher in NJ after
# Computation of the main outcome
minwage <-
minwage %>%
mutate(totalAfter = fullAfter + partAfter,
fullPropAfter = fullAfter / totalAfter)
# Average proportion of full time for each state
full_prop_by_state <-
minwage %>%
group_by(state) %>%
summarise(fullPropAfter = mean(fullPropAfter))
library("tidyverse")
library("qss")
data("minwage", package = "qss")
write.csv(minwage, file = "minwage.csv")
minwage
summary(minwage)
# View(minwage)
dim(minwage)          # give you the sample size and the number of variables
glimpse(minwage)
# Number of location in the file
minwage %>%
count(location)
# Create the variable state - two way to do it
minwage <-
mutate(minwage, state = if_else(location == "PA", "PA", "NJ"))
minwage <-
mutate(minwage, state1 = str_sub(location, -2L))
minwage
# Let's confirm that the state follow the law
nj_minwage <- 5.05        # You do this to avoid what is called the magic number
summarize(minwage)
policy <-
minwage %>%
mutate(pol_bef = if_else((wageBefore < nj_minwage), 1, 0),
pol_aft = if_else((wageAfter < nj_minwage), 1, 0)) %>%
group_by(state) %>%
summarise(prop_after = mean(pol_aft),
prop_before = mean(pol_bef))
policy
# but simply like this
minwage %>%
group_by(state) %>%
summarise(prop_after = mean(wageAfter < nj_minwage),
prop_before = mean(wageBefore < nj_minwage))
# tapply((minwage$wageAfter < minwage$nj_minwage), minwage$state, mean)
# Is the proportion full time higher in NJ after
# Computation of the main outcome
minwage <-
minwage %>%
mutate(totalAfter = fullAfter + partAfter,
fullPropAfter = fullAfter / totalAfter)
# Average proportion of full time for each state
full_prop_by_state <-
minwage %>%
group_by(state) %>%
summarise(fullPropAfter = mean(fullPropAfter))
full_prop_by_state
# Difference between NJ and PA - two ways to do it
spread(full_prop_by_state, state, fullPropAfter) %>%
mutate(diff = NJ - PA)
diff1 <- filter(full_prop_by_state, state == "NJ")[["fullPropAfter"]] - filter(full_prop_by_state, state == "PA")[["fullPropAfter"]]
diff1
# Is the proportion full time higher in NJ after
# Computation of the main outcome
minwage <-
minwage %>%
mutate(totalAfter = fullAfter + partAfter,
fullPropAfter = fullAfter / totalAfter)
# Average proportion of full time for each state
full_prop_by_state <-
minwage %>%
group_by(state) %>%
summarise(fullPropAfter = mean(fullPropAfter))
full_prop_by_state
# Difference between NJ and PA - two ways to do it
spread(full_prop_by_state, state, fullPropAfter) %>%
mutate(diff = NJ - PA)
diff1 <- filter(full_prop_by_state, state == "NJ")[["fullPropAfter"]] - filter(full_prop_by_state, state == "PA")[["fullPropAfter"]]
#diff1
# Is the proportion full time higher in NJ after
# Computation of the main outcome
minwage <-
minwage %>%
mutate(totalAfter = fullAfter + partAfter,
fullPropAfter = fullAfter / totalAfter)
# Average proportion of full time for each state
full_prop_by_state <-
minwage %>%
group_by(state) %>%
summarise(fullPropAfter = mean(fullPropAfter))
full_prop_by_state
# Difference between NJ and PA - two ways to do it
# spread(full_prop_by_state, state, fullPropAfter) %>%
#  mutate(diff = NJ - PA)
diff1 <- filter(full_prop_by_state, state == "NJ")[["fullPropAfter"]] - filter(full_prop_by_state, state == "PA")[["fullPropAfter"]]
#diff1
# Is the proportion full time higher in NJ after
# Computation of the main outcome
minwage <-
minwage %>%
mutate(totalAfter = fullAfter + partAfter,
fullPropAfter = fullAfter / totalAfter)
# Average proportion of full time for each state
full_prop_by_state <-
minwage %>%
group_by(state) %>%
summarise(fullPropAfter = mean(fullPropAfter))
full_prop_by_state
# Difference between NJ and PA - two ways to do it
# spread(full_prop_by_state, state, fullPropAfter) %>%
#  mutate(diff = NJ - PA)
diff1 <- filter(full_prop_by_state, state == "NJ")[["fullPropAfter"]] - filter(full_prop_by_state, state == "PA")[["fullPropAfter"]]
#diff1
## Subclassification
## Proportion of each fast-food chain in each state
prop_chain <-
minwage %>%
group_by(state) %>%
count(chain) %>%
mutate(prop_chain = n/sum(n))
prop_chain
## Why not put this information in a graph? Let's see
ggplot(prop_chain, aes(x = chain, y = prop_chain, color = state)) +
geom_point() +
coord_flip()                                                        # to flip x and y ascis
## Effect by chain
full_prop_by_state_chain <-
minwage %>%
group_by(state, chain) %>%
summarise(fullPropAfter = mean(fullPropAfter))
full_prop_by_state_chain
spread(full_prop_by_state_chain, state, fullPropAfter) %>%
mutate(diff = NJ - PA)
# Here also, we can compute the difference
ggplot(full_prop_by_state_chain, aes(x = chain, y = fullPropAfter, color = state)) +
geom_point() +
coord_flip()
## Before-and-after
minwage <-
minwage %>%
mutate(fullPropBefore = fullBefore / (fullBefore + partBefore))
minwage %>%
filter(state == "NJ") %>%
summarise(diff_bef_aft_NJ = mean(fullPropAfter) - mean(fullPropBefore))
## Before-and-after
minwage <-
minwage %>%
mutate(fullPropBefore = fullBefore / (fullBefore + partBefore))
minwage %>%
filter(state == "NJ") %>%
summarise(PropBefore = mean(fullPropBefore),
PropAfter = mean(fullPropAfter),
diff_bef_aft_NJ = mean(fullPropAfter) - mean(fullPropBefore))
minwage %>%
group_by(state) %>%
summarise(diff = mean(fullPropAfter) - mean(fullPropBefore)) %>%
spread(state, diff) %>%
mutate(diff_in_diff = NJ - PA)
minwage %>%
group_by(state) %>%
summarise(diff = mean(fullPropAfter) - mean(fullPropBefore)) %>%
spread(state, diff) %>%
mutate(diff_in_diff = NJ - PA)
minwage %>%
group_by(state) %>%
summarise(diff = mean(fullPropAfter) - mean(fullPropBefore))
minwage %>%
group_by(state) %>%
summarise(diff = mean(fullPropAfter) - mean(fullPropBefore))%>%
spread(state, diff) %>%
mutate(diff_in_diff = NJ - PA)
knitr::include_graphics("/Users/visseho/OneDrive - UQAM/Cours/Images_cours/Tableau1.jpg")
```{r, out.width='80'}
knitr::include_graphics("/Users/visseho/OneDrive - UQAM/Cours/Images_cours/Tableau1.jpg")
dim(dhs)
#1. Effacer l'environnement
rm(list = ls())     # Permet d'éffacer l'environnement
#2. Installer de nouveaux packages dont vous avez besoins
#3. Chargez ces packaqes
library(tidyverse)
#4. Ouvrir votre base de données
dhs <- read.csv("dhs_ipv.csv")
dim(dhs)
count(unique(dhs$country))
class(unique(dhs$country))
dim(unique(dhs$country))
unique(dhs$country)
class(dhs$beat_burnfood)
class(dhs$beat_goesout)
class(dhs$sec_school)
class(dhs$no_media)
class(dhs$country)
class(dhs$region)
class(dhs$year)
dhs1 <-
dhs %>%
filter(beat_goesout >= 14)
# vérification
min(dhs1$beat_goesout)
dhs2 <-
dhs %>%
filter(beat_goesout > 13 & beat_burnfood < 22)
# Verification
min(dhs2$beat_goesout)
max(dhs2$beat_burnfood)
dhs3 <-
dhs %>%
filter(sec_school > 22 & beat_goesout > 25)
dhs4 <-
dhs %>%
filter(region == "Sub-Saharan Africa" & beat_goesout > 18 & sec_school > 10)
dhs5 <-
dhs %>%
filter(beat_goesout < 15 | beat_goesout > 22)
# dhs9 : créer d'abord dhs91 intermédiaire
dhs91 <-
dhs %>%
group_by(country) %>%
count(country) %>%
filter(n >=2)
View(dhs91)
dhs9 <- inner_join(dhs, dhs91)
View(dhs9)
base <- read_csv("Devoir2_Statcompiler")
base <- read_csv("Devoir2_Statcompiler.xlsx")
library(openxlsx)
base <- read.xlsx("Devoir2_Statcompiler.xlsx")
View(base)
Kenya <-
base %>%
filter(Nom.du.pays == "Kenya")
View(Kenya)
library("devtools")
install.packages("devtools")
library("devtools")
install_github("kosukeimai/qss-package", build_vignettes = TRUE)
install_github("kosukeimai/qss-package", build_vignettes = TRUE)
library(tidyverse)
library(summarytools)
library(qss)
library(tidyverse)
ctable(resume$race, resume$sex)
knitr::include_graphics("SATE1.jpg")
knitr::include_graphics("factuel_contrafactuel.jpg")
data("resume", package = "qss")
# resume <- read_csv("resume.csv")        # What you will do to import the data (remember your directory)
head(resume)
freq(resume$sex)
freq(resume$call)
ctable(resume$race, resume$call)
library(summarytools)
#install.packages("devtools")
#library("devtools")
#install_github("kosukeimai/qss-package", build_vignettes = TRUE)
getwd()
library(tidyverse)
library(summarytools)
library(qss)
dhs_ipv <- read_csv("dhs_ipv.csv")
library(tidyverse)
library(summarytools)
library(qss)
dhs_ipv <- read_csv("dhs_ipv.csv")
dhs_ipv <- read_csv("dhs_ipv.csv")
#install.packages("devtools")
#library("devtools")
#install_github("kosukeimai/qss-package", build_vignettes = TRUE)
getwd()
library(tidyverse)
library(summarytools)
library(qss)
dhs_ipv <- read_csv("dhs_ipv.csv")
library(summarytools)
ctable(resume$race, resume$call)
View(resume)
freq(resume$call)
ctable(resume$race, resume$call)
#install.packages("devtools")
#library("devtools")
#install_github("kosukeimai/qss-package", build_vignettes = TRUE)
getwd()
library(tidyverse)
library(summarytools)
library(qss)
dhs_ipv <- read_csv("dhs_ipv.csv")
dhs_ipv <- read_csv("dhs_ipv.csv")
library(tidyverse)
library(summarytools)
library(qss)
dhs_ipv <- read_csv("dhs_ipv.csv")
library(tidyverse)
library(summarytools)
library(qss)
dhs_ipv <- read_csv("dhs_ipv.csv")
dhs_ipv <-
dhs_ipv %>%
# select(beat_burnfood!= "NA") %>%
mutate(beat_burnfood_cat = factor(ntile(beat_burnfood, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
beat_goesout_cat = factor(ntile(beat_goesout, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
no_media_cat = factor(ntile(no_media, 3), labels = c('Riche', 'Moyen', 'Pauvre')))
summary(dhs_ipv)
- Association entre deux variables qualitatives
ggplot(dhs_ipv) +
geom_bar(aes(x = no_media_cat, fill = beat_burnfood_cat), position = "dodge") +
ggtitle("Association entre ouverture aux médias et acceptation de la violence conjugale") +
xlab("Type de pays selon l'ouverture aux médias") +
ylab("Effectif") +
theme_bw()
ggplot(dhs_ipv) +
geom_boxplot(aes(x = no_media_cat, y = beat_burnfood, color = no_media_cat)) +
ggtitle("Association entre ouverture aux médias et acceptation de la violence conjugale") +
xlab("Type de pays selon l'ouverture aux médias") +
ylab("% qui estime qu'une femme doit être battue (beat_burnfood)")
ggplot(dhs_ipv, aes(x = no_media, y = beat_burnfood)) +
geom_point()
ggplot(dhs_ipv, aes(x = no_media, y = beat_burnfood)) +
geom_point(aes(color = region)) +
geom_smooth(aes(color = region), method = lm, se = FALSE,  formula = y ~ x)
- L'association est une **condition nécessaire** à la causalité (Mais elle **n'est pas suffisante**).
data("resume", package = "qss")
# resume <- read_csv("resume.csv")        # What you will do to import the data (remember your directory)
head(resume)
freq(resume$race)
freq(resume$call)
ctable(resume$race, resume$call)
ctable(resume$race, resume$call)
table(resume$race, resume$call)
tab <- table(resume$race, resume$call)
prop.table(tab)
round(prop.table(tab), 2)
round(prop.table(tab, "r"), 2)
round(prop.table(tab, "row"), 2)
?prop.table()
round(prop.table(tab, 1), 2)
round(prop.table(tab, 1)*100, 2)
ctable(resume$race, resume$sex)
ctable(resume$race, resume$call)
ctable(resume$call, resume$race)
knitr::include_graphics("endogeneite.jpg")
![](../../images/causalite1.jpg)
knitr::include_graphics("causalite1.jpg")
knitr::include_graphics("causalite1.jpeg")
knitr::include_graphics("causalite2.jpeg")
knitr::include_graphics("causalite3.jpeg")
ggplot(dhs_ipv) +
geom_bar(aes(x = no_media_cat, fill = beat_burnfood_cat), position = "fill") +
ggtitle("Association entre ouverture aux médias et acceptation de la violence conjugale") +
xlab("Type de pays selon l'ouverture aux médias") +
ylab("Effectif") +
theme_bw()
ggplot(na.omit(dhs_ipv)) +
geom_bar(aes(x = no_media_cat, fill = beat_burnfood_cat), position = "fill") +
ggtitle("Association entre ouverture aux médias et acceptation de la violence conjugale") +
xlab("Type de pays selon l'ouverture aux médias") +
ylab("Effectif") +
theme_bw()
ggplot(na.omit(dhs_ipv)) +
geom_boxplot(aes(x = no_media_cat, y = beat_burnfood, color = no_media_cat)) +
ggtitle("Association entre ouverture aux médias et acceptation de la violence conjugale") +
xlab("Type de pays selon l'ouverture aux médias") +
ylab("% qui estime qu'une femme doit être battue (beat_burnfood)")
write.csv(resume, file = "resume.csv")
knitr::include_graphics("endogeneite.jpg")
