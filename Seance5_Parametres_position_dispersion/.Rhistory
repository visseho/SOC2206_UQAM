fatherhh == "Present" & motherhh == "Present" ~ "Both parents",
fatherhh %in% c("Absent", "Deceased") & motherhh %in% c("Absent", "Deceased") ~ "Fostered out",
fatherhh %in% c("Absent", "Deceased") & motherhh == "Present" ~ "Mother only",
fatherhh == "Present" & motherhh %in% c("Absent", "Deceased") ~ "Father only")),
poly = factor(if_else(v505 %in% c(1:15), "poly", "mono")))
df_final <- df_final %>%
mutate(statut_mat = case_when(
is.na(statut_mat.x) ~ statut_mat.y,
TRUE ~ statut_mat.x
)) %>%
select(-statut_mat.x, -statut_mat.y)
df_final <- df_final %>%
mutate(struct_fam_1 = as_factor(case_when(
bio_parents == "Mother only" & statut_mat %in% c(0,2) ~ "Single mother",
bio_parents == "Mother only" & statut_mat == 1 ~ "Mother & stepfather",
bio_parents == "Father only" & statut_mat %in% c(0,2) ~ "Single father",
bio_parents == "Father only" & statut_mat == 1 ~ "Father & stepmother",
bio_parents == "Both parents" & statut_mat == 1 ~ "Father & mother",
bio_parents == "Fostered out" ~ "Fostered out"
)))
df_final <- df_final %>%
mutate(struct_fam_final = as_factor(case_when(
struct_fam_1 == "Single mother" ~ "Single mother",
struct_fam_1 == "Mother & stepfather" & v504 == 1 & !v505 %in% c(1:15) ~ "Mother & stepfather",
struct_fam_1 == "Mother & stepfather" & v504 == 1 & v505 %in% c(1:15) ~ "Mother & poly stepfather",
struct_fam_1 == "Mother & stepfather" & v504 == 2 & fatherhh == "Deceased" & !v505 %in% c(1:15) ~ "Mother & stepfather",
struct_fam_1 == "Mother & stepfather" & v504 == 2 & fatherhh == "Deceased" & v505 %in% c(1:15) ~ "Mother & poly stepfather",
struct_fam_1 == "Mother & stepfather" & v504 == 2 & fatherhh == "Absent" ~ "Mother & stepfather or father",
struct_fam_1 == "Single father" ~ "Single father",
struct_fam_1 == "Father & stepmother" ~ "Father & stepmother or mother",
struct_fam_1 == "Father & mother" ~ "Father & mother",
struct_fam_1 == "Fostered out" ~ "Fostered out"
)))
df_final <- df_final %>%
mutate(struct_fam_final_poly = factor(case_when(
struct_fam_final == "Mother & stepfather" & v505 %in% c(1:15) ~ "Mother & poly stepfather",
TRUE ~ as.character(struct_fam_final)
)))
return(df_final)
}
#Et pour terminer, la fonction finale qui combine les deux dernières et permet d'inputter nos 3 bases de données DHS et obtenir notre base de donnée finale avec la variable struct_fam
dhs_struct_fam <- function(pathlist) {
db_list <- import_dhs(pathlist[[2]], pathlist[[1]], pathlist[[3]])
df <- obtain_final(db_list[[1]], db_list[[2]], db_list[[3]]) %>%
get_family_vars()
return(df)
}
test <- cbind(datasets, unlist(downloads)) %>%
mutate(FilePath = `unlist(downloads)`)%>%
arrange(CountryName, FileType) %>%
select(CountryName, FilePath)
test <- split(as_vector(test$FilePath), test$CountryName, drop = T) %>%
lapply(as.character)
test_db <- dhs_struct_fam(test[[1]])
test[[1]]
dhs_struct_fam("/Users/visseho/Library/Caches/rdhs/datasets/")
big_list <- lapply(test, dhs_struct_fam)
#LIST SPLIT TEST
test <- cbind(datasets, unlist(downloads)) %>%
mutate(FilePath = `unlist(downloads)`)%>%
arrange(CountryName, FileType) %>%
select(CountryName, FilePath)
test <- split(as_vector(test$FilePath), test$CountryName, drop = T) %>%
lapply(as.character)
#readRDS(test[[1]][1])
#test[[1]]
#dhs_struct_fam("/Users/visseho/Library/Caches/rdhs/datasets/")
test_db <- dhs_struct_fam(test[[1]])
View(test)
test_db <- dhs_struct_fam(test[[1]])
#Testing our function on some of the newly downloaded files... First we need to define the functions
#Slightly modified: import_dhs isn't used since we're not directly using dta files. still left it in just in case.
#Il faut créer plusieurs petites fonctions pour les combiner en une seule. Donc, d'abord créer les fonctions pour subsetter chaque base de données correctement.
import_dhs <- function(hh, pr, ir) {
hh <- readRDS(hh)
pr <- readRDS(pr)
ir <- readRDS(ir)
labeled_vars1 <- sapply(pr, function(x) class(x) == "labelled")
hh[, labeled_vars1] <- lapply(pr[, labeled_vars1], as_factor)
return(list(hh, pr, ir))
}
subset_hh <- function(df) {
select(df, hhid, hv000, hv001, hv002, hv003, hv025, hv220, hv270, starts_with("hv104_"), starts_with("hv105_"), starts_with("hv106_"), starts_with("hv107_"), starts_with("hv108_"), starts_with("hv115_"), starts_with("hv116_"))
}
subset_pr <- function(df) {
select(df, hhid, hvidx, hv001, hv002, hv003, hv004, hv006, hv007, hv008, hv025, hv026, hv035, hv101, hv102, hv103, hv104, hv105, hv106, hv107, hv108, hv109, hv005, hv120, hv121, hv122, hv123, ha2,  ha40, ha69, hc63, hc64, num_range("hv", 110:129), num_range("ha", 11:13), num_range("hc", 1:15), num_range("hc", 70:73))
}
subset_ir <- function(df) {
select(df, caseid, v000, v001, v002, v003, v004, v005,  v106, v130, v501, v502, v503, v504, v313, v525, v536, v012, v013, v208, v212, v439, v440, v441, v505, v506, v511, v525, v531)
}
#ensuite: fusionner hh et pr, puis séparer en versions "child" et "parent"
fuse_hh_pr <- function(hh, pr) {
hh_sub <- subset_hh(hh)
pr_sub <- subset_pr(pr)
pr_hh <- merge(hh_sub, pr_sub, by = "hhid")
pr_hh_child <-
pr_hh %>%
filter(hv105 < 15) %>%
select(hhid, hvidx, hv001.x, hv002.x, hv101, hv104, hv105, hv121, hv122, hv111:hv114)
pr_hh_parent <-
pr_hh %>%
filter(hv105 >= 18) %>%
select(hv001.x, hv002.x, hv003.x, hvidx, hv105, hv115, hv116) %>%
mutate(statut_mat = hv116)
return(list(pr_hh_parent, pr_hh_child))
}
#fusionner les versions "child" et "parent" avec la version "ir" de façon à obtenir la version finale:
obtain_final <- function(hh, pr, ir) {
ir <- subset_ir(ir)
parent <- fuse_hh_pr(hh, pr)[[1]]
child <- fuse_hh_pr(hh, pr)[[2]]
df1 <- left_join(child, ir, by = c("hv001.x" = "v001", "hv002.x" = "v002", "hv112" = "v003"))
df2 <- left_join(df1, parent, by = c("hv001.x", "hv002.x", "hv112" = "hvidx"))
df_final <- left_join(df2, parent, by = c("hv001.x", "hv002.x", "hv114" = "hvidx"))
return(df_final)
}
#finalement (ou presque), une fonction qui ajoute fatherhh, motherhh, bio_parents et struct_fam
get_family_vars <- function(df) {
df_final <- df %>%
mutate(
motherhh = as_factor(case_when(
hv111 == 0 ~ "Deceased",
hv111 == 1 & hv112 == 0 ~ "Absent",
hv111 == 1 & hv112 != 0 ~ "Present")
))
df_final <- df_final %>%
mutate(
fatherhh = as_factor(case_when(
hv113 == 0 ~ "Deceased",
hv113 == 1 & hv114 == 0 ~ "Absent",
hv113 == 1 & hv114 != 0 ~ "Present")
))
df_final <- df_final %>%
mutate(
bio_parents = as_factor(case_when(
is.na(fatherhh) | is.na(motherhh) ~ NA_character_,
fatherhh == "Present" & motherhh == "Present" ~ "Both parents",
fatherhh %in% c("Absent", "Deceased") & motherhh %in% c("Absent", "Deceased") ~ "Fostered out",
fatherhh %in% c("Absent", "Deceased") & motherhh == "Present" ~ "Mother only",
fatherhh == "Present" & motherhh %in% c("Absent", "Deceased") ~ "Father only")),
poly = factor(if_else(v505 %in% c(1:15), "poly", "mono")))
df_final <- df_final %>%
mutate(statut_mat = case_when(
is.na(statut_mat.x) ~ statut_mat.y,
TRUE ~ statut_mat.x
)) %>%
select(-statut_mat.x, -statut_mat.y)
df_final <- df_final %>%
mutate(struct_fam_1 = as_factor(case_when(
bio_parents == "Mother only" & statut_mat %in% c(0,2) ~ "Single mother",
bio_parents == "Mother only" & statut_mat == 1 ~ "Mother & stepfather",
bio_parents == "Father only" & statut_mat %in% c(0,2) ~ "Single father",
bio_parents == "Father only" & statut_mat == 1 ~ "Father & stepmother",
bio_parents == "Both parents" & statut_mat == 1 ~ "Father & mother",
bio_parents == "Fostered out" ~ "Fostered out"
)))
df_final <- df_final %>%
mutate(struct_fam_final = as_factor(case_when(
struct_fam_1 == "Single mother" ~ "Single mother",
struct_fam_1 == "Mother & stepfather" & v504 == 1 & !v505 %in% c(1:15) ~ "Mother & stepfather",
struct_fam_1 == "Mother & stepfather" & v504 == 1 & v505 %in% c(1:15) ~ "Mother & poly stepfather",
struct_fam_1 == "Mother & stepfather" & v504 == 2 & fatherhh == "Deceased" & !v505 %in% c(1:15) ~ "Mother & stepfather",
struct_fam_1 == "Mother & stepfather" & v504 == 2 & fatherhh == "Deceased" & v505 %in% c(1:15) ~ "Mother & poly stepfather",
struct_fam_1 == "Mother & stepfather" & v504 == 2 & fatherhh == "Absent" ~ "Mother & stepfather or father",
struct_fam_1 == "Single father" ~ "Single father",
struct_fam_1 == "Father & stepmother" ~ "Father & stepmother or mother",
struct_fam_1 == "Father & mother" ~ "Father & mother",
struct_fam_1 == "Fostered out" ~ "Fostered out"
)))
df_final <- df_final %>%
mutate(struct_fam_final_poly = factor(case_when(
struct_fam_final == "Mother & stepfather" & v505 %in% c(1:15) ~ "Mother & poly stepfather",
TRUE ~ as.character(struct_fam_final)
)))
return(df_final)
}
#Et pour terminer, la fonction finale qui combine les deux dernières et permet d'inputter nos 3 bases de données DHS et obtenir notre base de donnée finale avec la variable struct_fam
dhs_struct_fam <- function(pathlist) {
db_list <- import_dhs(pathlist[[2]], pathlist[[1]], pathlist[[3]])
df <- obtain_final(db_list[[1]], db_list[[2]], db_list[[3]]) %>%
get_family_vars()
return(df)
}
#LIST SPLIT TEST
test <- cbind(datasets, unlist(downloads)) %>%
mutate(FilePath = `unlist(downloads)`)%>%
arrange(CountryName, FileType) %>%
select(CountryName, FilePath)
test <- split(as_vector(test$FilePath), test$CountryName, drop = T) %>%
lapply(as.character)
#readRDS(test[[1]][1])
#test[[1]]
#dhs_struct_fam("/Users/visseho/Library/Caches/rdhs/datasets/")
test_db <- dhs_struct_fam(test[[1]])
#Ensuite...
big_list <- readRDS("struct_fam_all_countries.rds")
View(big_list)
lapply(big_list, function(x) freq(x$struct_fam_final_poly))
test_mean <- sum(big_list$Benin$struct_fam_final_poly == "Mother & stepfather", na.rm = T) / length(big_list$Benin$struct_fam_final_poly)
list_mean <- lapply(big_list, function(x) sum(x$struct_fam_final_poly == "Mother & stepfather", na.rm = T) / length(x$struct_fam_final))
table_mean <- as_tibble(list_mean) %>%
t() %>%
as.data.frame() %>%
rownames_to_column("Country")
ggplot(table_mean, aes(x = Country, y = V1, fill = Country)) +
geom_col() +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), plot.title = element_text(hjust = 0.5)) +
guides(fill = F) +
ylab("") +
ggtitle("Percentage of households consisting of a mother and a stepfather")
# 1. Effacer l'environnement
rm(list = ls())
# 2. Installer les packages dont vous avez besoin
#install.packages("tidyverse")
#install.packages("summarytools")
# 3. Charger les packages
library(tidyverse)
library(summarytools)
# 4. Charger la base de données
dhs_ipv_benin <- read_csv("/Users/visseho/OneDrive - UQAM/Cours/Bases_donnees/dhs_ipv_benin.csv")
class(dhs_ipv_benin$V744A)
class(dhs_ipv_benin$V744E)
class(dhs_ipv_benin$V106)
# 1. Effacer l'environnement
rm(list = ls())
# 2. Installer les packages dont vous avez besoin
#install.packages("tidyverse")
#install.packages("summarytools")
# 3. Charger les packages
library(tidyverse)
library(summarytools)
# 4. Charger la base de données
dhs_ipv_benin <- read_csv("/Users/visseho/OneDrive - UQAM/Cours/Bases_donnees/dhs_ipv_benin.csv")
#dhs_ipv_benin <- read_csv("dhs_ipv_benin.csv")
# 1. Effacer l'environnement
rm(list = ls())
# 2. Installer les packages dont vous avez besoin
#install.packages("tidyverse")
#install.packages("summarytools")
# 3. Charger les packages
library(tidyverse)
library(summarytools)
# 4. Charger la base de données
dhs_ipv_benin <- read_csv("/Users/visseho/OneDrive - UQAM/Cours/Bases_donnees/dhs_ipv_benin.csv")
#dhs_ipv_benin <- read_csv("dhs_ipv_benin.csv")
# 1. Effacer l'environnement
rm(list = ls())
# 2. Installer les packages dont vous avez besoin
#install.packages("tidyverse")
#install.packages("summarytools")
# 3. Charger les packages
library(tidyverse)
library(summarytools)
# 4. Charger la base de données
dhs_ipv_benin <- read_csv("/Users/visseho/OneDrive - UQAM/Cours/Bases_donnees/dhs_ipv_benin.csv")
#dhs_ipv_benin <- read_csv("dhs_ipv_benin.csv")
# 1. Effacer l'environnement
rm(list = ls())
# 2. Installer les packages dont vous avez besoin
#install.packages("tidyverse")
#install.packages("summarytools")
# 3. Charger les packages
library(tidyverse)
library(summarytools)
# 4. Charger la base de données
dhs_ipv_benin <- read_csv("/Users/visseho/OneDrive - UQAM/Cours/Bases_donnees/dhs_ipv_benin.csv")
#dhs_ipv_benin <- read_csv("dhs_ipv_benin.csv")
View(dhs_ipv_benin)
class(dhs_ipv_benin$V744A)
class(dhs_ipv_benin$V744E)
class(dhs_ipv_benin$V106)
class(dhs_ipv_benin$V744A)
class(dhs_ipv_benin$V744A)
dhs_ipv_benin <-
dhs_ipv_benin %>%
mutate(education = case_when(
V106 == 0 ~ "Pas d'éducation",
V106 == 1 ~ "Primaire",
V106 == 2 | 3 ~ "Secondaire",
V106 == 8 ~ "NA"
))
class(dhs_ipv_benin$education)
dhs_ipv_benin <-
dhs_ipv_benin %>%
mutate(education = factor(case_when(
V106 == 0 ~ "Pas d'éducation",
V106 == 1 ~ "Primaire",
V106 == 2 | 3 ~ "Secondaire",
V106 == 8 ~ "NA"
)))
class(dhs_ipv_benin$education)
dhs_ipv_benin <-
dhs_ipv_benin %>%
mutate(V744A_nouveau = factor(case_when(
V744A == 0 ~ "non",
V744A == 1 ~ "Oui",
V744A == 7 | 8 ~ "NA"
)))
dhs_ipv_benin <-
dhs_ipv_benin %>%
mutate(education = factor(case_when(
V106 == 0 ~ "Pas education",
V106 == 1 ~ "Primaire",
V106 == 2 | V106 == 3 ~ "Secondaire",
V106 == 8 ~ NA_character_)),
V744A_nouveau = factor(case_when(
V744A == 0 ~ "Non",
V744A == 1 ~ "Oui",
V744A == 7 ~ "NSP",
V744A == 8 ~ NA_character_)),
V744E_nouveau = factor(case_when(
V744E == 0 ~ "Non",
V744E == 1 ~ "Oui",
V744E == 7 ~ "NSP",
V744E == 8 ~ NA_character_)))
View(dhs_ipv_benin)
freq(dhs_ipv_benin$V744A_nouveau)
freq(dhs_ipv_benin$V744E_nouveau)
freq(dhs_ipv_benin$education)
freq(dhs_ipv_benin$V744E_nouveau)
freq(dhs_ipv_benin$education)
freq(dhs_ipv_benin$V744E_nouveau)
dhs_ipv_benin <-
dhs_ipv_benin %>%
mutate(education = factor(case_when(
V106 == 0 ~ "Pas education",
V106 == 1 ~ "Primaire",
V106 == 2 | V106 == 3 ~ "Collégial",
V106 == 8 ~ NA_character_)),
V744A_nouveau = factor(case_when(
V744A == 0 ~ "Non",
V744A == 1 ~ "Oui",
V744A == 7 ~ "NSP",
V744A == 8 ~ NA_character_)),
V744E_nouveau = factor(case_when(
V744E == 0 ~ "Non",
V744E == 1 ~ "Oui",
V744E == 7 ~ "NSP",
V744E == 8 ~ NA_character_)))
freq(dhs_ipv_benin$education)
dhs_ipv_benin_no_missing <-
dhs_ipv_benin %>%
mutate(education = factor(case_when(
V106 == 0 ~ "Pas education",
V106 == 1 ~ "Primaire",
V106 == 2 | V106 == 3 ~ "Secondaire",
V106 == 8 ~ NA_character_)),
V744A_nouveau = factor(case_when(
V744A == 0 ~ "Non",
V744A == 1 ~ "Oui",
V744A == 7 ~ NA_character_,
V744A == 8 ~ NA_character_)),
V744E_nouveau = factor(case_when(
V744E == 0 ~ "Non",
V744E == 1 ~ "Oui",
V744E == 7 ~ NA_character_,
V744E == 8 ~ NA_character_)))
dhs_ipv_benin_no_missing <-na.omit(dhs_ipv_benin_no_missing)
freq(dhs_ipv_benin_no_missing$V744A_nouveau)
freq(dhs_ipv_benin_no_missing$V744E_nouveau)
freq(dhs_ipv_benin_no_missing$education)
# V744A_nouveau variable dépendante
ctable(dhs_ipv_benin_no_missing$education, dhs_ipv_benin_no_missing$V744A_nouveau)
# V744A_nouveau variable dépendante
ctable(dhs_ipv_benin_no_missing$education, dhs_ipv_benin_no_missing$V744A_nouveau, "c")
# V744A_nouveau variable dépendante
ctable(dhs_ipv_benin_no_missing$education, dhs_ipv_benin_no_missing$V744A_nouveau, "r")
# Relation entre deux variables
ctable(dhs_ipv_benin_no_missing$V744A_nouveau, dhs_ipv_benin_no_missing$V744E_nouveau)
# V744E_nouveau variable dépendante
ctable(dhs_ipv_benin_no_missing$education, dhs_ipv_benin_no_missing$V744E_nouveau)
ggplot(dhs_ipv_benin_no_missing) +
geom_bar(aes(x = education))
ggplot(dhs_ipv_benin_no_missing) +
geom_bar(aes(x = education, fill = V744A_nouveau))
ggplot(dhs_ipv_benin_no_missing) +
geom_bar(aes(x = education, fill = V744A_nouveau), position = "fill")
ggplot(dhs_ipv_benin_no_missing) +
geom_bar(aes(x = education, fill = V744A_nouveau), position = "dodge")
ggplot(dhs_ipv_benin_no_missing) +
geom_bar(aes(x = education, fill = V744A_nouveau), position = "fill")
tableau <-
dhs_ipv_benin %>%
group_by(YEAR, IDHSPSU) %>%
summarise(n = sum(n()))
tableau
dhs_ipv_benin <-
dhs_ipv_benin %>%
mutate(V106_nouveau = if_else(V106 >=2, 1, 0)) %>%
filter(V744A <=1 & V744E <=1)
freq(dhs_ipv_benin$V106_nouveau)
freq(dhs_ipv_benin$V744A)
dhs_ipv_benin_aggrege <-
dhs_ipv_benin %>%
#  mutate(V106_nouveau = if_else(V106 >=2, 1, 0)) %>%
group_by(YEAR, IDHSPSU) %>%
summarise(beat_goesout = mean(V744A, na.rm = TRUE),
beat_burnfood = mean(V744E, na.rm = TRUE),
sec_school = mean(V106_nouveau, na.rm = TRUE))
View(dhs_ipv_benin_aggrege)
View(dhs_ipv_benin_aggrege)
View(dhs_ipv_benin)
parametres_bg <-
dhs_ipv_benin_aggrege %>%
group_by(YEAR) %>%
summarise(mean_bg = mean(beat_goesout),
var_bg = var(beat_goesout),
sd_bg = sd(beat_goesout),
median_bg = median(beat_goesout),
min_bg = min(beat_goesout),
max_bg = max(beat_goesout),
Q1_bg = quantile(beat_goesout, prob = 0.25),
Q3_bg = quantile(beat_goesout, probs = 0.75))
parametres_bg
parametres_bb1 <-
dhs_ipv_benin %>%
group_by(YEAR) %>%
summarise(mean_bb = mean(V744E))
parametres_bb1
parametres_bb
parametres_bb <-
dhs_ipv_benin_aggrege %>%
group_by(YEAR) %>%
summarise(mean_bb = mean(beat_burnfood),
var_bb = var(beat_burnfood),
sd_bb = sd(beat_burnfood),
median_bb = median(beat_burnfood),
min_bb = min(beat_burnfood),
max_bb = max(beat_burnfood),
Q1_bb = quantile(beat_burnfood, prob = 0.25),
Q3_bb = quantile(beat_burnfood, probs = 0.75))
parametres_bb
parametres_bb1 <-
dhs_ipv_benin %>%
group_by(YEAR) %>%
summarise(mean_bb = mean(V744E))
parametres_bb1
head(unique(dhs_ipv_benin_aggrege$YEAR))
class(dhs_ipv_benin_aggrege$YEAR)
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood, color = as.factor(YEAR)))
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood))
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood, color = YEAR))
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood, color = as_factor(YEAR)))
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood)) +
facet_wrap(~YEAR)
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood)) +
facet_grid(~YEAR)
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood)) +
facet_grid(~YEAR, ncol = 2)
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood)) +
facet_wrap(~YEAR, ncol = 2)
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood)) +
facet_wrap(~YEAR)
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood, color = as_factor(YEAR))) +
facet_wrap(~YEAR)
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood, color = as.factor(YEAR))) +
geom_smooth(aes(x = sec_school, y = beat_burnfood, color = as.factor(YEAR)), method = lm, se = FALSE) +
facet_wrap(~YEAR)
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood, color = as.factor(YEAR))) +
geom_smooth(aes(x = sec_school, y = beat_burnfood, color = as.factor(YEAR)), method = lm, se = FALSE) +
facet_wrap(~YEAR)
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood, color = as.factor(YEAR))) +
geom_smooth(aes(x = sec_school, y = beat_burnfood, color = as.factor(YEAR)), method = lm, se = T) +
facet_wrap(~YEAR)
View(dhs_ipv_benin_aggrege)
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood, color = as.factor(YEAR))) +
geom_smooth(aes(x = sec_school, y = beat_burnfood, color = as.factor(YEAR)), se = T) +
facet_wrap(~YEAR)
ggplot(dhs_ipv_benin_aggrege) +
geom_point(aes(x = sec_school, y = beat_burnfood, color = as.factor(YEAR))) +
geom_smooth(aes(x = sec_school, y = beat_burnfood, color = as.factor(YEAR)), method = lm, se = T) +
facet_wrap(~YEAR)
knitr::include_graphics("tcl.jpg")
erreur_type <- 3.22/sqrt(10)
erreur_type
dis <-
distribution <-
ggplot(data = data.frame(x = c(64, 74)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 69, sd = erreur_type), color = "blue") +
geom_vline(aes(xintercept = 71, color = "red")) +
geom_vline(aes(xintercept = 67, color = "green")) +
theme(legend.position = "none")
dis <-
distribution <-
ggplot(data = data.frame(x = c(64, 74)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 69, sd = erreur_type), color = "blue") +
geom_vline(aes(xintercept = 71, color = "red")) +
geom_vline(aes(xintercept = 67, color = "green")) +
theme(legend.position = "none")
erreur_type <- 3.22/sqrt(10)
erreur_type
distribution <-
ggplot(data = data.frame(x = c(64, 74)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 69, sd = erreur_type), color = "blue") +
geom_vline(aes(xintercept = 71, color = "red")) +
geom_vline(aes(xintercept = 67, color = "green")) +
theme(legend.position = "none")
